version: '3.8'

services:
  # PostgreSQL Database - Using local installation
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: crm-postgres
  #   environment:
  #     POSTGRES_DB: neobrutalism_crm
  #     POSTGRES_USER: crm_user
  #     POSTGRES_PASSWORD: crm_password_2024
  #     POSTGRES_INITDB_ARGS: "--encoding=UTF8"
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql
  #   networks:
  #     - crm-network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U crm_user -d neobrutalism_crm"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # Redis Cache & Rate Limiting
  redis:
    image: redis:7-alpine
    container_name: crm-redis
    command: redis-server --requirepass redis_password_2024 --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Application - Running locally for debugging
  # crm-backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: crm-backend
  #   environment:
  #     SPRING_PROFILES_ACTIVE: prod
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/neobrutalism_crm
  #     SPRING_DATASOURCE_USERNAME: crm_user
  #     SPRING_DATASOURCE_PASSWORD: crm_password_2024
  #     SPRING_REDIS_HOST: redis
  #     SPRING_REDIS_PORT: 6379
  #     SPRING_REDIS_PASSWORD: redis_password_2024
  #     JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this-in-production-min-256-bits}
  #     JWT_EXPIRATION: 3600000
  #     JWT_REFRESH_EXPIRATION: 604800000
  #     RATE_LIMIT_ENABLED: "true"
  #     MINIO_ENDPOINT: http://minio:9000
  #     MINIO_ACCESS_KEY: minioadmin
  #     MINIO_SECRET_KEY: minioadmin123
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   networks:
  #     - crm-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: crm-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Redis Commander (Web UI for Redis) - Optional debug tool
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: crm-redis-commander
  #   environment:
  #     REDIS_HOSTS: local:redis:6379:0:redis_password_2024
  #   ports:
  #     - "8081:8081"
  #   depends_on:
  #     - redis
  #   networks:
  #     - crm-network
  #   profiles:
  #     - debug

  # PgAdmin (Web UI for PostgreSQL) - Not needed, using local Postgres
  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: crm-pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@crm.local
  #     PGADMIN_DEFAULT_PASSWORD: admin_password_2024
  #     PGADMIN_CONFIG_SERVER_MODE: 'False'
  #   ports:
  #     - "5050:80"
  #   depends_on:
  #     - postgres
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   networks:
  #     - crm-network
  #   profiles:
  #     - debug

volumes:
  # postgres_data:
  #   driver: local
  redis_data:
    driver: local
  # pgadmin_data:
  #   driver: local
  minio_data:
    driver: local

networks:
  crm-network:
    driver: bridge
